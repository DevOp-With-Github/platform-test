name: test_workflow

on:
  workflow_dispatch:
    inputs:
      clusterName:
        description: 'Cluster name'
        default: 'bal-perf-cluster-test'
        required: false
      test-name:
        description: 'test name'
        default: 'test_passthrough'
        required: false
      sku:
        description: 'node VM size'
        default: 'Standard_F16s_v2'
        required: false
jobs:
  setup:
    runs-on: ubuntu-latest
    timeout-minutes: 600
    steps:
    - name: CHECKOUT
      uses: actions/checkout@v2
    - name: AZURE LOGIN
      uses: azure/login@v1
      with:
        creds: ${{secrets.AZURE_CREDENTIALS}}
    - name: Creat PPG_ID 
      id: create-ppg
      env:
        RESOURCE_GROUP: ${{ secrets.CLUSTER_RESOURCE_GROUP }}
        PPG_NAME: ${{ github.event.inputs.clusterName }}-ppg
      run: |
        az ppg create \
          -n "${PPG_NAME}" \
          -g "${RESOURCE_GROUP}" \
          -l eastus\
          -t standard
        ppgid=$(az ppg show  \
        --name "${PPG_NAME}" \
        --resource-group "${RESOURCE_GROUP}" \
        --query id --output tsv)
        echo "::set-output name=ppg-id::${ppgid}"
        echo "ppg-id: ${ppgid}"
    - name: create WS
      id: create-ws
      run: |
        az monitor log-analytics workspace create --resource-group "${{ secrets.CLUSTER_RESOURCE_GROUP }}" --workspace-name "${{ github.event.inputs.clusterName }}"-ws --location eastus
        wsid=$(az monitor log-analytics workspace show --resource-group "${{ secrets.CLUSTER_RESOURCE_GROUP }}" --workspace-name "${{ github.event.inputs.clusterName }}-ws" --query id --output tsv)
        echo "::set-output name=ws-id::${wsid}"
        echo "ws-id: ${wsid}"
    - name: Create Cluster
      id: create-cluster
      env:
        AZURE_APP_ID: ${{ secrets.AZURE_APP_ID }}
        AZURE_APP_PASSWORD: ${{ secrets.AZURE_APP_PASSWORD }}
        RESOURCE_GROUP: ${{ secrets.CLUSTER_RESOURCE_GROUP }}
        PPG_ID: ${{ steps.create-ppg.outputs.ppg-id }}
        VM_SIZE: ${{ github.event.inputs.sku }}
      run: |
        az aks create \
            --resource-group "${RESOURCE_GROUP}" \
            --name "${{ github.event.inputs.clusterName }}" \
            --service-principal "${AZURE_APP_ID}"\
            --client-secret "${AZURE_APP_PASSWORD}" \
            --ppg "${PPG_ID}" \
            --node-vm-size "${VM_SIZE}" \
            --node-osdisk-size 256 \
            --node-osdisk-type Managed \
            --node-count 2 \
            --location "eastus" \
            --enable-addons monitoring \
            --workspace-resource-id "${{ steps.create-ws.outputs.ws-id }}" \
            --generate-ssh-keys
    - name: Configure AKS
      uses: azure/aks-set-context@v1
      with:
        creds: '${{ secrets.AZURE_CREDENTIALS }}'
        cluster-name: '${{ github.event.inputs.clusterName }}'
        resource-group: ${{ secrets.CLUSTER_RESOURCE_GROUP }}
    - name: Deploy Niginx
      run: |
        # Create a namespace for your ingress resources
        kubectl create namespace ingress-basic

        # Add the ingress-nginx repository
        helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx

        # Use Helm to deploy an NGINX ingress controller
        helm install nginx-ingress ingress-nginx/ingress-nginx \
            --namespace ingress-basic \
            --set controller.replicaCount=2 \
            --set controller.nodeSelector."beta\.kubernetes\.io/os"=linux \
            --set defaultBackend.nodeSelector."beta\.kubernetes\.io/os"=linux \
            --set controller.admissionWebhooks.patch.nodeSelector."beta\.kubernetes\.io/os"=linux
        # Wait for ingress ip
        kubectl get service nginx-ingress-ingress-nginx-controller --namespace ingress-basic -w  \
        -o 'go-template={{with .status.loadBalancer.ingress}}{{range .}}{{.ip}}{{"\n"}}{{end}}{{.err}}{{end}}' 2>/dev/null \
        | head -n1
    outputs:
      ppgid: ${{ steps.create-ppg.outputs.ppg-id }}
      wsid: ${{ steps.create-ws.outputs.ws-id }}
  build:
    needs: setup
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 1
      matrix:
        payload: [50]
        users: [1]
    env:
      TEST_NAME: ${{github.event.inputs.test-name}}
      TEST_ROOT: tests
    steps:
    - uses: actions/checkout@v2
    - name: Login to DockerHub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
    - name: Ballerina Build
      uses: ballerina-platform/ballerina-action@master # uses slbeta2
      env:
        CI_BUILD: true
        WORKING_DIR: tests/${{github.event.inputs.test-name}}
      with:
        args:
          build
    - name: image list
      run: docker image ls
    - name: Docker push
      run: docker push trankietnhi/${TEST_NAME}:latest
    - name: Copy artifacts
      run: |
        ls -ltr
        cp -a ${TEST_ROOT}/${TEST_NAME}/target/kubernetes/${TEST_NAME}/. ${TEST_ROOT}/${TEST_NAME}/deployment/
    - name: 'Install Kustomize'
      run: |
        curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh"  | bash
    - name: 'Run Kustomize'
      run: |
          kustomize build ${TEST_ROOT}/${TEST_NAME}/deployment > ${TEST_ROOT}/${TEST_NAME}/final.yaml
          pwd
          ls -al ${TEST_ROOT}/${TEST_NAME}
          cat ${TEST_ROOT}/${TEST_NAME}/final.yaml
    - name: Configure AKS
      uses: azure/aks-set-context@v1
      with:
        creds: '${{ secrets.AZURE_CREDENTIALS }}'
        cluster-name: '${{ github.event.inputs.clusterName }}'
        resource-group: ${{ secrets.CLUSTER_RESOURCE_GROUP }}
    - name: Deploy artifacts
      run: |
        kubectl apply -f ${TEST_ROOT}/${TEST_NAME}/final.yaml
    - name: Login via Az module
      uses: azure/login@v1
      with:
        creds: ${{secrets.AZURE_CREDENTIALS}}
    - name: Write values to outputs
      id: write
      run: |
        echo "::set-output name=cluster-ip::$(kubectl get service nginx-ingress-ingress-nginx-controller --namespace ingress-basic -w  \
                                              -o 'go-template={{with .status.loadBalancer.ingress}}{{range .}}{{.ip}}{{"\n"}}{{end}}{{.err}}{{end}}' 2>/dev/null \
                                              | head -n1)"
        echo "::set-output name=scenario-name::${TEST_NAME}"
        echo "::set-output name=vm-name::bal-perf-vm-`echo ${TEST_NAME} | tr '_' '-'`-${{ matrix.users }}-${{ matrix.payload }}-${{ github.event.inputs.clusterName }}-${{ GITHUB.RUN_NUMBER }}"
        echo "::set-output name=git-token::${{ secrets.BALLERINA_BOT_TOKEN }}"
        echo "::set-output name=ppg-id::${{ needs.setup.outputs.ppgid }}"
    - name: Create VM Instance
      id: vminstance
      run: |
        az vm create --resource-group "${{ secrets.CLUSTER_RESOURCE_GROUP }}"  --name "${{ steps.write.outputs.vm-name }}"  --admin-username "${{ secrets.VM_USER }}" --location  eastus \
        --image "Canonical:UbuntuServer:18.04-LTS:latest" --tags benchmark-number=${{ steps.write.outputs.vm-name }} --size Standard_F4s_v2 --ppg "${{ steps.write.outputs.ppg-id }}" --generate-ssh-keys
        echo "::set-output name=ip-address::$(az vm show -d -g "${{ secrets.CLUSTER_RESOURCE_GROUP }}" -n "${{ steps.write.outputs.vm-name }}" --query publicIps -o tsv)"
        chmod 400 ~/.ssh/id_rsa
        cp ~/.ssh/id_rsa $GITHUB_WORKSPACE
        cp ~/.ssh/id_rsa.pub $GITHUB_WORKSPACE
    - name: Wait for VM instance
      run: sleep 60s
      shell: bash
    - name: Execute performance tests
      uses: appleboy/ssh-action@master
      env: 
        IP: ${{ steps.write.outputs.cluster-ip }}
        SCENARIO_NAME: ${{ steps.write.outputs.scenario-name }}
        GITHUB_TOKEN: ${{steps.write.outputs.git-token}}
        PAYLOAD: ${{ matrix.payload }}
        USERS: ${{ matrix.users }}
      with:
        host: ${{ steps.vminstance.outputs.ip-address }}
        username: ${{ secrets.VM_USER }}
        key_path: 'id_rsa'
        envs: IP,SCENARIO_NAME,GITHUB_TOKEN,PAYLOAD,USERS
        command_timeout: '180m' #3 hours
        timeout: 300s #5 mins
        script: |
          git config --global user.email "nhitrank@gmail.com"
          git config --global user.name "KietNhiTran"
          git clone https://kietnhitran@github.com/DevOp-With-Github/platform-test.git
          pwd
          sudo cp -r platform-test/base-image /
          sudo chmod -R 777 /base-image
          sh /base-image/init.sh
          source /etc/profile.d/10-perf-vm.sh
          execute-tests.sh -c $IP -s $SCENARIO_NAME -p $PAYLOAD -u $USERS
    - name: copy file to host
      run: |
        ls -ltr
        scp -r -v -o StrictHostKeyChecking=no -i id_rsa ${{ secrets.VM_USER }}@${{ steps.vminstance.outputs.ip-address }}:uploads uploads
    - name: Gather Serverside metrics
      run: |
          sudo chmod -R 777 $(pwd)/"uploads"
          results_dir=$(pwd)/"uploads/results"
          echo ${results_dir}
          ls -la ${results_dir}
          sudo rm ${results_dir}/original-warmup.jtl
          sudo rm ${results_dir}/original-measurement.jtl
          pwd
          start_time=$(cat ${results_dir}/test_start_time_utc)
          end_time=$(cat ${results_dir}/test_end_time_utc)
          util_dir=$(pwd)/"base-image/utils/server-side-data-collector/"
          bash base-image/utils/server-side-data-collector/generate-static-reports.sh ${{ secrets.AZURE_APP_ID }} ${{ secrets.AZURE_APP_PASSWORD }} "${{ github.event.inputs.clusterName }}" ${{ secrets.CLUSTER_RESOURCE_GROUP }} ${{ secrets.SUBSCRIPTION_ID }} ${util_dir} ${{ secrets.TENANT_ID }} ${results_dir} ${{ needs.setup.outputs.wsid}} ${start_time} ${end_time}
    - name: upload results
      uses: actions/upload-artifact@v2
      with:
        name: ${{ inputs.clusterName }}
        path: uploads/results
    - name: Undeploy Kubernetes artifacts
      if: always()
      run: |
        kubectl delete -f ${TEST_ROOT}/${TEST_NAME}/final.yaml
    - name: Cleanup VM
      if: always()
      continue-on-error: true
      run: |
        az resource delete --ids $(az resource list --tag benchmark-number=${{ steps.write.outputs.vm-name }} -otable --query "[].id" -otsv)
  cleanup:
    needs: build
    name: clean up
    if: always()
    runs-on: ubuntu-latest
    steps:
    - name: AZURE LOGIN
      uses: azure/login@v1
      with:
        creds: ${{secrets.AZURE_CREDENTIALS}}
    - name: Cleaning up the cluster
      run: |
        az aks delete --name ${{ github.event.inputs.clusterName }} --resource-group ${{ secrets.CLUSTER_RESOURCE_GROUP }} -y
        az ppg delete --name ${{ github.event.inputs.clusterName }}-ppg --resource-group ${{ secrets.CLUSTER_RESOURCE_GROUP }}